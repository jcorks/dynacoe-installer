#!/bin/sh

if [ "$1" = "--help" ]; then 
    echo "dynacoe-config: switches between installed builds of Dynacoe"
    echo ""
    echo "usage:"
    echo "       dynacoe-config [build version]"
    echo ""
    echo ""
    echo "dynacoe-config allows you to swap what versions of Dynacoe"
    echo "dynacoe-build will use when building your projects. Each version"
    echo "of Dynacoe has its own set of headers, depednencies, and library,"
    echo "all of which can either be acquired from dynacoe-update, or from"
    echo "your own Dynacoe build."
    echo "" 
    echo "Running dynacoe-config with no arguments prints a list of"
    echo "currently installed Dynacoe versions. Passing the version name "
    echo "will set the current Dynacoe version to use for dynacoe-build invocations"
    echo ""
    echo "Part of the Dynacoe project."
    echo "https://github.com/jcorks/Dynacoe"
    echo "Johnathan Corkery (jcorkery@umich.edu)"
    exit 0
fi


# dynacoe-config: allows users to switch through Dynacoe installations that they have
if [ ! -d "$DYNACOE_INSTALL_PATH/userspace/ver/" ]; then 
    echo "There do not seem to be any Dynacoe builds installed. Try"
    echo "dynacoe-update to retrieve the latest (or you can try building your own from the git repo!)"
    exit 1
fi



# If given no arguments, Enumerate installed builds

available=$(ls "$DYNACOE_INSTALL_PATH/userspace/ver/")
current=$(cat "$DYNACOE_INSTALL_PATH/userspace/ver/DEFAULT")
if [ "$#" -eq "0" ]; then 
    echo "Currently installed versions of Dynacoe:"


    
    for ver in $available; do 
        if [ "$ver" = "DEFAULT" ]; then 
            continue
        fi

        if [ "$current" = "$ver" ]; then
            echo "(main) $ver"
        else
            echo "       $ver"
        fi
    done
    exit 0
    
fi




target="$1"
for ver in $available; do 
    if [ "$ver" = "DEFAULT" ]; then 
        continue
    fi

    if [ "$target" = "$ver" ]; then        
        echo "$target" > "$DYNACOE_INSTALL_PATH/userspace/ver/DEFAULT"
        echo "$target now set as the main build."
        exit 0
    fi
done

echo "build $target does not exist as an installed build version. Run this"
echo "script with no arguments to see all available versions installed."
